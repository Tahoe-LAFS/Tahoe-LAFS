{ lib
, isPyPy
, python
, pythonPackages
, buildPythonPackage
, tahoe-lafs-src
}:
let
  inherit (import ./lib.nix) extrasDeps;
in
buildPythonPackage rec {
  pname = "tahoe-lafs";
  version = "1.18.0.post1";
  src = tahoe-lafs-src;

  # The direct Python package dependencies of Tahoe-LAFS.
  propagatedBuildInputs = with pythonPackages; [
    attrs
    autobahn
    cbor2
    click
    collections-extended
    cryptography
    distro
    eliot
    filelock
    foolscap
    future
    klein
    magic-wormhole
    netifaces
    psutil
    pyyaml
    pycddl
    pyrsistent
    pyutil
    six
    treq
    twisted
    werkzeug
    zfec
    zope_interface
  ] ++ (
    # Get the dependencies for the Twisted extras we depend on, too.
    extrasDeps twisted [ "tls" "conch" ]
  );

  # # The test suite has a dependency on a command-line tool from Foolscap and
  # # we don't seem to get it unless Foolscap is _also_ this kind of dependency.
  # propagatedNativeBuildInputs = with pythonPackages; [ foolscap ];

  # The source doesn't include version information - so dump some in
  # to it here.
  postPatch =
    let
      versionContent = builtins.toFile "_version.py" ''
        # This _version.py is generated by tahoe-lafs.nix.

        __pkgname__ = "tahoe-lafs"

        # TODO: We can have more metadata after we switch to flakes.
        # Then the `self` input will have a `sourceInfo` attribute telling us
        # things like git revision, a revision counter, etc.
        real_version = "${version}"
        full_version = real_version
        branch = "master"
        verstr = real_version
        __version__ = verstr
      '';
    in
      ''
        cp ${versionContent} src/allmydata/_version.py
      '';

  # Don't run checks.  The flake provides apps for running the test suite.
  # Use those.
  doCheck = false;

  passthru = {
    # Represent the dependencies of the Python package "extras" here.  We
    # record and expose them here but whoever depends on us needs to ask for
    # them on their own.
    optional-dependencies = with pythonPackages; rec {
      tor = [ txtorcon ];
      i2p = [ txi2p ];

      # The additional direct dependencies of our own unit tests.
      unit-test = [
        beautifulsoup4
        fixtures
        hypothesis
        mock
        prometheus-client
        testtools
        # The tests exercise Tor and I2P support so also include those.
      ] ++ tor ++ i2p;

      # The additional direct dependencies of our own integration tests.
      # Since the integration tests import from the unit test suite, they also
      # have all of the unit test dependencies.
      integration-test = [
        html5lib
        paramiko
        pytest
        pytest-timeout
        pytest-twisted
      ] ++ unit-test;
    };
  };

  meta = with lib; {
    homepage = "https://tahoe-lafs.org/";
    description = "secure, decentralized, fault-tolerant file store";
    # Also TGPPL
    license = licenses.gpl2Plus;
  };
}
